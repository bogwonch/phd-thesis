* Literature Review
** A Generalized Temporal Role-Based Access Control Model

GTRBAC is the short name

*Periodicity Constraints* define the exact intervals a role can be activated.
E.g. A /DayDoctor/ works from 9am--9pm every day:

*Duration constraints* define how long a role is valid for.
E.g. A Doctor can be on call for 12 hours.

There can be conflicts with GTRBAC policies namely
- where two roles get activated at the same time, which both disable and enable another role.
  - not an issue in AppPAL: no obligation rules.
- circular dependencies
  - don't think this is an issue.  No negation.
- constraints where there is a constraint on role enabling and disabling that mean that you can't do anything useful
  - might be an issue if we do the negation stuff

** Access Control in an Open Distributed Environment
Describes an architecture for indepdendant, networked services called /Oasis/.
They define a /heart beat protocol/ to ensure that distributed systems are still making valid decisions.

Users (they call them clients) must be tied to a particular service (i.e. someone must be able to make decisions about them).
They also must be able to provide evidence of delegation.
Rights are not delegated, but rather they provide potential users with attributes that allow them to be accepted as other users, which they claim is equivalent to delegating rights.  Sounds a lot like an RBAC scheme, and they go on to give a /role definition language/.

Example: a client may have the role /ChiefExaminer/ if they can show they're logged in as the user *km*.

#+BEGIN_SRC
Chiefexaminer() <- Login.LoggedOn(km, s)
                 : s in TrustedServers.
#+END_SRC

Paper gives a case study of an access control policy for a filing system.

They give a rough protocol for issuing delegation certificates but it is very very high level.
When a delegator issues a delegation certificate, the delegator also issues itself a revocation certificate.
Delegators can also issue a lifetime to the delegation certificate, after which the revocation certificate is automatically released.

** Access Control via Belnap Logic
Belnap logic is a four valued logic.
Looks like the basis for XACML's values.

#+BEGIN_SRC
truthiness
|       true 
|      /     \
| undef       conflict
|      \     /
|       false 
+---------------------knowledge
#+END_SRC

They define a language called /PBel/ for expressing policies.
They give several examples of policy composition including
- When two roles share duties but each may have some special ones that each can only do (e.g. a physician and a cardiologist).
- When you want to do an absolute right or prohibition (i.e. when you always should be able to do something no matter what policy composed with).

** Detecting Incompleteness, Conflicting and Unreachability XACML Policies Using Answer Set Programming
Using their earlier work formalising XACML using /answer set programming/ (ASP), they show how XACML programs can be checked for various properties.

There formalism is as follows:

| Term        | Grammar                                                 |
|-------------+---------------------------------------------------------|
| ⟨PolicySet⟩ | /PolicySetId/ = [⟨Target⟩, ⟪PolicySetID * ⟫, *CombID* ] |
|             | /PolicySetId/ = [⟨Target⟩, ⟪ /PolicyID/ * ⟫, *CombID* ] |
| ⟨Policy⟩    | /PolicyID/ = [ ⟨Target⟩, ⟪ PolicySetID + ⟫, *CombID* ]  |
| ⟨Rule⟩      | /RuleID/ = [ *Effect*, ⟨Target⟩, ⟨Condition⟩ ]          |
| ⟨Condition⟩ | /prepositional formulae/                                |
| ⟨Target⟩    | ~NULL~                                                  |
|             | ∧ ⟨AnyOf⟩ +                                             |
| ⟨AnyOf⟩     | ∨ ⟨AllOf⟩ +                                             |
| ⟨AllOf⟩     | ∧ ⟨Match⟩ +                                             |
| ⟨Match⟩     | *AttrType* (/attribute value/)                          |
| *CombID*    | ~po~                                                    |
|             | ~do~                                                    |
|             | ~fa~                                                    |
|             | ~ooa~                                                   |
| *Effect*    | ~deny~                                                  |
|             | ~permit~                                                |
| *AttrType*  | ~subject~                                               |
|             | ~action~                                                |
|             | ~resource~                                              |
|             | ~environment~                                           |
| ⟨Request⟩   | { *Attribute* + }                                       |
| *Attribute* | *AttrType* (/attribute value/)                          |
|             | /external state/                                        |

When evaluating:

| XACML Component | Values                                           |
|-----------------+--------------------------------------------------|
| ⟦⟨Match⟩⟧       | match (=m=) and not match (=nm=)                 |
| ⟦⟨AllOf⟩⟧       | match (=m=) and not match (=nm=)                 |
| ⟦⟨AnyOf⟩⟧       | match (=m=) and not match (=nm=)                 |
| ⟦⟨Target⟩⟧      | match (=m=) and not match (=nm=)                 |
| ⟦⟨Condition⟩⟧   | true (=t=) and false (=f=)                       |
| ⟦⟨Rule⟩⟧        | permit (=p=) deny (=d= and not applicable (=na=) |
| ⟦⟨Policy⟩⟧      | permit (=p=) deny (=d= and not applicable (=na=) |
| ⟦⟨PolicySet⟩⟧   | permit (=p=) deny (=d= and not applicable (=na=) |

| XACML Component | Evaluation                                      | Notes               |
|-----------------+-------------------------------------------------+---------------------|
|                 | ⎧ =m=   if M ∈ Q                                | M ∈ ⟨Match⟩         |
| ⟦M⟧(Q)          | ⎨                                               | Q ∈ ⟨Request⟩       |
|                 | ⎩ =nm=  if M ∉ Q                                |                     |
|                 | ⎧ =m=   if ∀i ⟦M_i_{}⟧ = =m=                        | A ∈ ⟨AllOf⟩         |
| ⟦A⟧(Q)          | ⎨                                               |                     |
|                 | ⎩ =nm=  if ∃i ⟦M_{i}⟧ = =nm=                   |                     |
|                 | ⎧ =m=   if ∃i ⟦A_i_{}⟧ = =m=                        | E ∈ ⟨AnyOf⟩         |
| ⟦E⟧(Q)          | ⎨                                               |                     |
|                 | ⎩ =nm=  if ∀i ⟦A_i⟧ = =nm=                       |                     |
|                 | ⎧ =m=   if ∀i ⟦E_i_{}⟧ = =m=                        | T ∈ ⟨Target⟩        |
| ⟦T⟧(Q)          | ⎨ =m=   if T = ~NULL~                           |                     |
|                 | ⎩ =nm=  if ∃i ⟦E_i⟧ = =nm=                       |                     |
| ⟦C⟧(Q)          | eval(C, Q)                                      | C ∈ ⟨Condition⟩     |
|                 | ⎧ /e/   if ⟦T⟧(Q) = =m= ∧ ⟦C⟧(Q) = =t=          |                     |
| ⟦R⟧(Q)          | ⎨ =na=  if ⟦T⟧(Q) = =m= ∧ ⟦C⟧(Q) = =f=          | R ≔ [/e/, /T/, /C/] |
|                 | ⎩ =na=  if ⟦T⟧(Q) = =nm=                        |                     |
|                 | ⎧ =na=          if ∀i ⟦R_i_{}⟧(Q) = =na=            | P ∈ ⟨Policy⟩        |
| ⟦P⟧(Q)          | ⎨ =na=          if ⟦T⟧(Q) = =nm=                |                     |
|                 | ⎩ ⊕_{CombID}(*R*)  otherwise                       |                     |
|                 | ⎧ =na=          if ∀i ⟦P_i_{}⟧(Q) = =nm=            | PS ∈ ⟨PolicySet⟩    |
| ⟦PS⟧(Q)         | ⎨ =na=          if ⟦T⟧(Q) = =nm=                |                     |
|                 | ⎩ ⊕_{CombID}(*P*)  otherwise                       |                     |
|                 | ⎧ =p=   if ∃i: v_i = =p=                         | S ≔ ⟪v₁..vₙ⟫        |
| ⊕_po(S)          | ⎨ =d=   if ∀i: v_i ≠ =p= ∧ ∃j: v_j = =d=          |                     |
|                 | ⎩ =na=  otherwise                               |                     |
|                 | ⎧ =p=   if ∃i: v_i = =d=                         |                     |
| ⊕_do(S)          | ⎨ =d=   if ∀i: v_i ≠ =d= ∧ ∃r: v_j = =p=          |                     |
|                 | ⎩ =na=  otherwise                               |                     |
|                 | ⎧ v_i    if ∃i: v_i ≠ =na= ∧ ∀j : j<i ⇒ v_j = =na= |                     |
| ⊕_fa(S)          | ⎨                                               |                     |
|                 | ⎩ =na=  if ∀i v_i = =na=                         |                     |
|                 | ⎧ v_i    if ∃i: v_i ≠ =na= ∧ ∀j: j≠i ⇒ v_j= =na=   |                     |
| ⊕_ooa(S)         | ⎨ =na=  if ∃i, j: i≠j ∧ v_i ≠ =na= ∧ v_j ≠ =na=   |                     |
|                 | ⎩ =na=  if ∀i: v_i = =na=                        |                     |

*** Incompleteness

_complete_: ∀Q: ⟦PS_{root}⟧(Q) ≠ =na=.
_gap_: ¬ _complete_ ≣ ∃Q: ⟦PS_{root}⟧(Q) = =na=.

P_gap:
  _gap_ ← val(PS_root, =na=).
  ⊥     ← ¬ _gap_.

*** Conflict

_conflict_: ∃Q: ⟦R⟧(Q) = =p= ∧ ⟦R′⟧(Q) = =d=.

P_conflict:
  _conflict_ ← val(R, =p=), val(R′, =d=), R ≠ R′.
  ⊥          ← ¬ _conflict_.

*** Reachability

_reachable_ (R): ∃Q: ⟦R⟧(Q) ≠ =na=.

P_reachable:
  _reachable_ (R) ← val(R, E), E ≠ =na=.


A policy is unreachable if every request ends in something not-applicable.

_unreachable_ (R): ∀Q: ⟦R⟧ = =na=.

In the case of /permit-overrides/, a policy is not reachable if its decision is deny but the final decision of the root policy is permit

_unreachable_ (R): ∀Q: ⟦R⟧ = =d= ∧ ⟦P⟧(Q) = =p=.

For /deny-overrides/ the results are inverted.

_unreachable_ (R): ∀Q: ⟦R⟧ = =p= ∧ ⟦P⟧(Q) = =d=.

For /only-one-applicable/ there must be something unreachable if it is an applicable policy, but the final decision of the root policy is not applicable.  This indicates ther is anouther policy that is also applicable.

_unreachable_ (R): ∀Q: ⟦R⟧ = =p= ∧ ⟦P⟧(Q) = =na=.

For /first applicable/ a policy is unreachable if there is another policy in the same collection that is earlier in the sequence but also not reachable.

_unreachable_ (R_j): ∀Q: ⟦R_{i}⟧ ≠ =na= ∧ ⟦R_{j}⟧ ≠ =na= ∧ i < j
** eXtensible Access Control Markup Language (XACML) Version 3.0
- A _policy set_ is a collection of policies
  - Maps to an *assertion context*
- A _policy_ is a collection of rules encoding a single conceptual decision, and the means for combining the results of evalutating the rules
  - Maps to the set of *assertions* that all have the same fact after the =says=
  - AppPAL effectively only uses the _permit-overrides_ combining algorithm.
    If any of the _rules_ in the policy evaluates to true, then the _policy_ 
- A _rule_ is a boolean decision process
  - Maps to an *assertion*

- A _subject_ is the entity requesting access
  - Maps the the *subject* of the fact after the =says=
- An _action_ is the type of access requested
  - Maps to the *verb-phrase predicate*
- A _resource_ is something with attributes
  - A *constant*? A *subject* of a fact?
- An _environment_ is the optional source of additional information
  - The evaluation of the _constraint_?

- XACML has four _policy_ combining algorithms:
  - _Deny-overrides_: if a single rule evaluates to _DENY_ then the policy evaluates to deny
  - _Permit-overrides_: if a single rule evaluates to _PERMIT_ then the policy evaluates to permit
  - _First-applicable_: the first rule that evaluates successfully (i.e. no error when evaluating) defines what the outcome is.
  - _Only-one_: requires that only one policy can apply to a decision and that that decides what the result is.  Anything other than one results in _NOT-APPLICABLE_ or _INDETERMINATE_ results.
  
  - AppPAL effectively only does _permit-overrides_.

- Decisions can have multiple subjects, or be based on attributes about their subjects
  - Handled by *parameterized predicates* and *conditionals* in AppPAL

- _Operators_ (Section 2.8 Line 365) allow data from XACML to be manipulated, e.g. adding numbers, checking path components, and negating rules.
  - Some of this you can do with AppPAL constraints, i.e. manipulating attributes which map to numbers.
  - Negation of facts you can't do in AppPAL

- _Policy Distribution_ (Section 2.9 Line 394), XACML policies could be distributed but they don't give any means for doing so.
  - AppPAL doesn't give the precise mechanisms, but by tying all assertions to a given speaker and using that speaker as part of all evaluation rules it mostly falls out quite neatly.

- _Policy Indexing_ (Section 2.10 Line 406) allows policies to be stored in an ordered form and queried about their /ordering/
  - No support in AppPAL

- _Action Policies_ (Section 2.12 Line 442) allow policies to spcifiy _obligations_ that they must discharge if the decision is used (for example logging certain actions).
  - AppPAL doesn't support these

- _Advice_ (3.3.1.5 line 567) gives additional metadata about how rules /could/ be used which the enforcement point is free to ignore
  - AppPAL doesn't support these
  - At least in part because AppPAL just gives the decision, not any of the surrounding enforcement.
 
- _Delegation_
  - So it turns out the actual XACML 3.0 spec doesn't really mention delegation.
    - It mentions a max delegation depth tag
  - It does refer to a document [[http://docs.oasis-open.org/xacml/3.0/xacml-3.0-administration-v1-spec-cd-03-en.doc%20%20%20%20][OASIS Committee Draft 03, XACML v3.0 Administration and Delegation Profile Version 1.0]] that does give some semantics.
  - Three use-cases given:
    - _Policy administration_.  Someone else writes the policies.  Go import them before doing anything.
    - _Dynamic delegation_.  Someone else writes the policies., but they're going to change over time and the person who specifies them now may not be allowed to specifiy them later.  Go import them and delete them after they expire.
    - _Only if X is permitted to do it_.  You can do something only if someone else can do it.  I.e. Alice can fill in for Bob when he's on holiday.
  - AppPAL's can-say statement and implicit speakers handle the first two, and there is no need to revoke, just to change the *can-say* statement.
  - The *can-act-as* statement handles the third case.

*** Example
**** Example 1.

#+BEGIN_QUOTE
652 Assume that a corporation named Medi Corp (identified by its domain name: med.example.com) has an
653 access control policy that states, in English:
654   Any user with an e-mail name in the "med.example.com" namespace is allowed to perform any action on
655   any resource.
#+END_QUOTE

#+BEGIN_SRC xml
 [a1]     <?xml version="1.0" encoding="UTF-8"?>
 [a2]     <Policy
 [a3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
 [a4]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 [a5]       xsi:schemaLocation="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17
 [a6]       http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd"
 [a7]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:SimplePolicy1"
 [a8]       Version="1.0"
 [a9]       RuleCombiningAlgId="identifier:rule-combining-algorithm:deny-overrides">
[a10]       <Description>
[a11]         Medi Corp access control policy
[a12]       </Description>
[a13]       <Target/>
[a14]       <Rule
[a15]         RuleId= "urn:oasis:names:tc:xacml:3.0:example:SimpleRule1"
[a16]         Effect="Permit">
[a17]         <Description>
[a18]           Any subject with an e-mail name in the med.example.com domain
[a19]           can perform any action on any resource.
[a20]         </Description>
[a21]         <Target>
[a22]           <AnyOf>
[a23]             <AllOf>
[a24]               <Match
[a25]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match">
[a26]               <AttributeValue
[a27]                 DataType="http://www.w3.org/2001/XMLSchema#string"
[a28]                   >med.example.com</AttributeValue>
[a29]               <AttributeDesignator
[a30]                 MustBePresent="false"
[a31]                 Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
[a32]                 AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id"
[a33]                 DataType="urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name"/>
[a34]               </Match>
[a35]             </AllOf>
[a36]           </AnyOf>
[a37]         </Target>
[a38]       </Rule>
[a39]     </Policy>
#+END_SRC

#+BEGIN_SRC apppal
'medicorp' says User canPerform(Action, Resource)
  if Action isAction,
     Resource isResource,
     User hasEmailAddr(Email)
  where 
    inNameSpace(Email, 'med.example.com') = true.
#+END_SRC

AppPAL version is significantly shorter and clearer, but can't abstract the /can perform any action/ aspect neatly.
 
**** Example 2.

#+BEGIN_QUOTE
1. A person, identified by his or her patient number, may read any record for which he or she is the designated patient.
2. A person may read any record for which he or she is the designated parent or guardian, and for which the patient is under 16 years of age.
3. A physician may write to any medical element for which he or she is the designated primary care physician, provided an email is sent to the patient.
4. An administrator shall not be permitted to read or write to medical elements of a patient record.
#+END_QUOTE

#+BEGIN_SRC apppal
'medicorp' says Patient canRead(Record)
  if Patient hasPatientNumber(N),
     Record hasDesignatedPatientNumber(N).

'medicorp' says Person canRead(Record)
  if Record hasDesignatedPatientNumber(N),
     Patient hasPatientNumber(N),
     Person isGuardianOf(Patient)
  where
    age(Patient) < 16.

'medicord' says Physician canWrite(Record)
  if Record hasPrimaryCarePhysician(Physician),
     Record hasPatientNumber(N),
     Patient hasPatientNumber(N),
     Physician hasEmailed(Patient).
#+END_SRC

Rule 4 is unnecessary in AppPAL as everything requires explicit authorization, but if we allow negated predicates then this could be implemented:

#+BEGIN_SRC apppal
'medicord' says Administrator canNotRead(Record)
  if Administrator can-act-as 'Administrator',
     Record isMedicalRecord.

'medicord' says Administrator canNotWrite(Record)
  if Administrator can-act-as 'Administrator',
     Record isMedicalRecord.
#+END_SRC


#+BEGIN_SRC xml
     [f1]     <?xml version="1.0" encoding="UTF-8"?>
     [f2]     <Policy
     [f3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [f4]       xmlns:xacml ="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [f5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [f6]       xmlns:md="http://www.med.example.com/schemas/record.xsd"
     [f7]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:1"
     [f8]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides"
     [f9]       Version="1.0">
    [f10]       <PolicyDefaults>
    [f11]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [f12]       </PolicyDefaults>
    [f13]       <Target/>
    [f14]       <VariableDefinition VariableId="17590034">
    [f15]         <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [f16]           <Apply
    [f17]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [f18]             <AttributeDesignator
    [f19]               MustBePresent="false"
    [f20]               Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [f21]               AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:patient-number"
    [f22]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f23]           </Apply>
    [f24]           <Apply
    [f25]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [f26]             <AttributeSelector
    [f27]                 MustBePresent="false"
    [f28]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f29]                 Path="md:record/md:patient/md:patient-number/text()"
    [f30]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f31]           </Apply>
    [f32]         </Apply>
    [f33]       </VariableDefinition>
    [f34]       <Rule
    [f35]         RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:1"
    [f36]         Effect="Permit">
    [f37]         <Description>
    [f38]           A person may read any medical record in the
    [f39]           http://www.med.example.com/schemas/record.xsd namespace
    [f40]           for which he or she is the designated patient
    [f41]         </Description>
    [f42]         <Target>
    [f43]           <AnyOf>
    [f44]             <AllOf>
    [f45]               <Match MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [f46]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [f47]                  >urn:example:med:schemas:record</AttributeValue>
    [f48]                 <AttributeDesignator
    [f49]                   MustBePresent="false"
    [f50]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f51]                 AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [f52]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [f53]               </Match>
    [f54]               <Match
    [f55]                 MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [f56]                 <AttributeValue
    [f57]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [f58]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f59]                     >md:record</AttributeValue>
    [f60]                 <AttributeDesignator
    [f61]                   MustBePresent="false"
    [f62]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f63]                  AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [f64]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [f65]               </Match>
    [f66]             </AllOf>
    [f67]           </AnyOf>
    [f68]           <AnyOf>
    [f69]             <AllOf>
    [f70]               <Match
    [f71]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [f72]                 <AttributeValue
    [f73]                   DataType="http://www.w3.org/2001/XMLSchema#string"
    [f74]                    >read</AttributeValue>
    [f75]                 <AttributeDesignator
    [f76]                   MustBePresent="false"
    [f77]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [f78]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [f79]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f80]               </Match>
    [f81]             </AllOf>
    [f82]           </AnyOf>
    [f83]         </Target>
    [f84]         <Condition>
    [f85]           <VariableReference VariableId="17590034"/>
    [f86]         </Condition>
    [f87]       </Rule>
    [f88]     </Policy>

[g1]     <?xml version="1.0" encoding="UTF-8"?>
     [g2]     <Policy
     [g3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [g4]       xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [g5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [g6]       xmlns:xf="http://www.w3.org/2005/xpath-functions"
     [g7]       xmlns:md="http:www.med.example.com/schemas/record.xsd"
     [g8]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:2"
     [g9]       Version="1.0"
    [g10]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
    [g11]       <PolicyDefaults>
    [g12]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [g13]       </PolicyDefaults>
    [g14]       <Target/>
    [g15]       <VariableDefinition VariableId="17590035">
    [g16]         <Apply
    [g17]           FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-less-or-equal">
    [g18]           <Apply
    [g19]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-one-and-only">
    [g20]             <AttributeDesignator
    [g21]               MustBePresent="false"
    [g22]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:environment"
    [g23]               AttributeId="urn:oasis:names:tc:xacml:1.0:environment:current-date"
    [g24]               DataType="http://www.w3.org/2001/XMLSchema#date"/>
    [g25]           </Apply>
    [g26]           <Apply
    [g27]       FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration">
    [g28]             <Apply
    [g29]               FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-one-and-only">
    [g30]               <AttributeSelector
    [g31]                 MustBePresent="false"
    [g32]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g33]                 Path="md:record/md:patient/md:patientDoB/text()"
    [g34]                 DataType="http://www.w3.org/2001/XMLSchema#date"/>
    [g35]             </Apply>
    [g36]             <AttributeValue
    [g37]               DataType="http://www.w3.org/2001/XMLSchema#yearMonthDuration"
    [g38]               >P16Y</AttributeValue>
    [g39]           </Apply>
    [g40]         </Apply>
    [g41]       </VariableDefinition>
    [g42]       <Rule
    [g43]         RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:2"
    [g44]         Effect="Permit">
    [g45]         <Description>
    [g46]           A person may read any medical record in the
    [g47]           http://www.med.example.com/records.xsd namespace
    [g48]           for which he or she is the designated parent or guardian,
    [g49]           and for which the patient is under 16 years of age
    [g50]         </Description>
    [g51]         <Target>
    [g52]           <AnyOf>
    [g53]             <AllOf>
    [g54]               <Match
    [g55]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [g56]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [g57]                   >urn:example:med:schemas:record</AttributeValue>
    [g58]                 <AttributeDesignator
    [g59]                   MustBePresent="false"
    [g60]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g61]                AttributeId= "urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [g62]                  DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [g63]               </Match>
    [g64]               <Match
    [g65]                 MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [g66]                 <AttributeValue
    [g67]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [g68]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g69]                   >md:record</AttributeValue>
    [g70]                 <AttributeDesignator
    [g71]                   MustBePresent="false"
    [g72]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g73]                   AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [g74]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [g75]               </Match>
    [g76]             </AllOf>
    [g77]           </AnyOf>
    [g78]           <AnyOf>
    [g79]             <AllOf>
    [g80]               <Match
    [g81]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [g82]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
    [g83]                    >read</AttributeValue>
    [g84]                 <AttributeDesignator
    [g85]                   MustBePresent="false"
    [g86]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [g87]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [g88]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [g89]               </Match>
    [g90]             </AllOf>
    [g91]           </AnyOf>
    [g92]         </Target>
    [g93]         <Condition>
    [g94]           <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:and">
    [g95]             <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [g96]               <Apply
    [g97]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [g98]                 <AttributeDesignator
    [g99]                   MustBePresent="false"
   [g100]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
   [g101]                  AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:parent-guardian-id"
   [g102]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [g103]               </Apply>
   [g104]               <Apply
   [g105]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
   [g106]                 <AttributeSelector
   [g107]                  MustBePresent="false"
   [g108]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [g109]          Path="md:record/md:parentGuardian/md:parentGuardianId/text()"
   [g110]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [g111]               </Apply>
   [g112]             </Apply>
   [g113]             <VariableReference VariableId="17590035"/>
   [g114]           </Apply>
   [g115]         </Condition>
   [g116]       </Rule>
   [g117]     </Policy>

     [h1]     <?xml version="1.0" encoding="UTF-8"?>
     [h2]     <Policy
     [h3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [h4]       xmlns:xacml ="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [h5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [h6]       xsi:schemaLocation="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd"
     [h7]       xmlns:md="http:www.med.example.com/schemas/record.xsd"
     [h8]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:3"
     [h9]       Version="1.0"
    [h10]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
    [h11]       <Description>
    [h12]         Policy for any medical record in the
    [h13]         http://www.med.example.com/schemas/record.xsd namespace
    [h14]       </Description>
    [h15]       <PolicyDefaults>
    [h16]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [h17]       </PolicyDefaults>
    [h18]       <Target>
    [h19]         <AnyOf>
    [h20]           <AllOf>
    [h21]             <Match
    [h22]               MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [h23]               <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [h24]                 >urn:example:med:schemas:record</AttributeValue>
    [h25]               <AttributeDesignator
    [h26]                 MustBePresent="false"
    [h27]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h28]                 AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [h29]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [h30]             </Match>
    [h31]           </AllOf>
    [h32]         </AnyOf>
    [h33]       </Target>
    [h34]       <Rule RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:3"
    [h35]         Effect="Permit">
    [h36]         <Description>
    [h37]           A physician may write any medical element in a record
    [h38]           for which he or she is the designated primary care
    [h39]           physician, provided an email is sent to the patient
    [h40]         </Description>
    [h41]         <Target>
    [h42]           <AnyOf>
    [h43]             <AllOf>
    [h44]               <Match
    [h45]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h46]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
    [h47]                   >physician</AttributeValue>
    [h48]                 <AttributeDesignator
    [h49]                   MustBePresent="false"
    [h50]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [h51]                   AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:role"
    [h52]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h53]               </Match>
    [h54]             </AllOf>
    [h55]           </AnyOf>
    [h56]           <AnyOf>
    [h57]             <AllOf>
    [h58]               <Match
    [h59]                  MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [h60]                  <AttributeValue
    [h61]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [h62]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h63]                     >md:record/md:medical</AttributeValue>
    [h64]                  <AttributeDesignator
    [h65]                    MustBePresent="false"
    [h66]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h67]                    AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [h68]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [h69]               </Match>
    [h70]             </AllOf>
    [h71]           </AnyOf>
    [h72]           <AnyOf>
    [h73]             <AllOf>
    [h74]               <Match
    [h75]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h76]                 <AttributeValue
    [h77]                   DataType="http://www.w3.org/2001/XMLSchema#string"
    [h78]                   >write</AttributeValue>
    [h79]                 <AttributeDesignator
    [h80]                   MustBePresent="false"
    [h81]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [h82]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [h83]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h84]               </Match>
    [h85]             </AllOf>
    [h86]           </AnyOf>
    [h87]         </Target>
    [h88]         <Condition>
    [h89]           <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h90]             <Apply
    [h91]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [h92]               <AttributeDesignator
    [h93]                 MustBePresent="false"
    [h94]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [h95]           AttributeId="urn:oasis:names:tc:xacml:3.0:example: attribute:physician-id"
    [h96]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h97]             </Apply>
    [h98]             <Apply
    [h99]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
   [h100]               <AttributeSelector
   [h101]                  MustBePresent="false"
   [h102]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [h103]      Path="md:record/md:primaryCarePhysician/md:registrationID/text()"
   [h104]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h105]             </Apply>
   [h106]           </Apply>
   [h107]         </Condition>
   [h108]       </Rule>
   [h109]       <ObligationExpressions>
   [h110]         <ObligationExpression ObligationId="urn:oasis:names:tc:xacml:example:obligation:email"
   [h111]           FulfillOn="Permit">
   [h112]           <AttributeAssignmentExpression
   [h113]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:mailto">
   [h114]             <AttributeSelector
   [h115]               MustBePresent="true"
   [h116]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [h117]               Path="md:record/md:patient/md:patientContact/md:email"
   [h118]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h119]           </AttributeAssignmentExpression>
   [h120]           <AttributeAssignmentExpression
   [h121]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:text">
   [h122]             <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
   [h123]             >Your medical record has been accessed by:</AttributeValue>
   [h124]           </AttributeAssignmentExpression>
   [h125]           <AttributeAssignmentExpression
   [h126]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:text">
   [h127]             <AttributeDesignator
   [h128]               MustBePresent="false"
   [h129]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
   [h130]               AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id"
   [h131]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h132]           </AttributeAssignmentExpression>
   [h133]         </ObligationExpression>
   [h134]       </ObligationExpressions>
   [h135]     </Policy>

           [i1]   <?xml version="1.0" encoding="UTF-8"?>
           [i2]   <Policy
           [i3]     xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
           [i4]     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           [i5]     xmlns:md="http:www.med.example.com/schemas/record.xsd"
           [i6]     PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:4"
           [i7]     Version="1.0"
           [i8]     RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
           [i9]     <PolicyDefaults>
          [i10]       <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
          [i11]     </PolicyDefaults>
          [i12]     <Target/>
          [i13]     <Rule
          [i14]       RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:4"
          [i15]       Effect="Deny">
          [i16]       <Description>
          [i17]         An Administrator shall not be permitted to read or write
          [i18]         medical elements of a patient record in the
          [i19]         http://www.med.example.com/records.xsd namespace.
          [i20]       </Description>
          [i21]       <Target>
          [i22]         <AnyOf>
          [i23]           <AllOf>
          [i24]             <Match
          [i25]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i26]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i27]               >administrator</AttributeValue>
          [i28]               <AttributeDesignator
          [i29]                 MustBePresent="false"
          [i30]         Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
          [i31]               AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:role"
          [i32]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i33]             </Match>
          [i34]           </AllOf>
          [i35]         </AnyOf>
          [i36]         <AnyOf>
          [i37]           <AllOf>
          [i38]             <Match
          [i39]               MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
          [i40]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
          [i41]               >urn:example:med:schemas:record</AttributeValue>
          [i42]               <AttributeDesignator
          [i43]                 MustBePresent="false"
          [i44]             Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i45]            AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
          [i46]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
          [i47]             </Match>
          [i48]             <Match
          [i49]               MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
          [i50]               <AttributeValue
          [i51]              DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
          [i52]       XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i53]                  >md:record/md:medical</AttributeValue>
          [i54]               <AttributeDesignator
          [i55]                  MustBePresent="false"
          [i56]             Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i57]             AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
          [i58]             DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
          [i59]             </Match>
          [i60]           </AllOf>
          [i61]         </AnyOf>
          [i62]         <AnyOf>
          [i63]           <AllOf>
          [i64]             <Match
          [i65]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i66]             <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i67]                >read</AttributeValue>
          [i68]               <AttributeDesignator
          [i69]                  MustBePresent="false"
          [i70]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
          [i71]                 AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
          [i72]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i73]             </Match>
          [i74]           </AllOf>
          [i75]           <AllOf>
          [i76]             <Match
          [i77]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i78]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i79]               >write</AttributeValue>
          [i80]               <AttributeDesignator
          [i81]                  MustBePresent="false"
          [i82]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
          [i83]                 AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
          [i84]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i85]             </Match>
          [i86]           </AllOf>
          [i87]         </AnyOf>
          [i88]       </Target>
          [i89]     </Rule>
          [i90]   </Policy>
#+END_SRC

Again, the AppPAL is considerably clearer, and shorter.
Whilst we can't do the obligation of requiring an email to the patient, we can still require that it is done.
** Formalisation and Implementation of the XACML Access Control Mechanism
Fantastic links to surrounding work formalising XACML policies.

They give a short-hand notation for XACML, and present a formalisation of XACML.
They also have a tool, called [[https://github.com/andreamargheri/FACPL/][FACPL]] that lets you manipulate policies based on their formalism, and it looks to be actively developed.

** Reasoning about XACML Policies using CSP
They show how a subset of XACML policy features[fn:2] can be modelled in CSP.
Looks interesting but I need to know CSP better to really understand it.

** Mobile Iron Q4 Mobile Security and Risk Review
Fairly quotable.

#+BEGIN_QUOTE
Our research shows that more than 50% of enterprises have at least one non-compliant
device at any given time.

Most enterprises have concerns about jailbroken (iOS) or
rooted (Android) devices. For most, this is considered a binary function; it’s either jailbroken/
rooted or not. However, our security research has determined that device compromise is more
complex than that.

Most malware targets compromised devices, using the
jailbroken or rooted device to gain unauthorized access to corporate
network, data, and other resources.

[w]e noted that 53% of enterprises had at least one device that was non-
compliant with at least one of the policies described below.
- 33% had missing devices.
- 22% had users remove PIN.
- 5% had users remove MDM.
- 20% had devices with old policies.

Ninety-six percent of mobile malware variants target Android.

Less than 5% of enterprises have deployed a mobile anti-malware solution

The top 10 consumer apps most often blacklisted by enterprises are:
1. Dropbox (consumer version) 
2. Angry Birds
3. Facebook 
4. Microsoft OneDrive (consumer version)
5. Google Drive (consumer version)
6. Box (consumer version)
7. Whatsapp
8. Twitter
9. Skype
10. SugarSync (consumer version)
#+END_QUOTE

** Synthesising Verified Access Control Systems in XACML
The author's present a formalism of XACML expressed using the RW language.
RW is a propositional language with queries made as to whether an /agent/ can  /read/ or /write/ to a prepositional variable[fn:1].

They show how the RW language can be translated into XACML (with an SQL backend I believe).

Since RW descriptions can be verified, then they claim that allows them to produce verified XACML translations.

** XACML 3.0 in Answer Set Programming
Seems to be a duplicate or tweak to their work in the /Detecting Incompleteness.../ paper.
Focuses more on the implementation and less on the properties (though they are both included).

** The Logic of XACML
Again this duplicates some of the stuff from Ramli's other papers but seems to go much further in giving the semantics.
Seems much more in depth than the others.


* Footnotes

[fn:1] No idea what this is. 
[fn:2] They don't do obligation and limit constraints to time based things.
